{"version":3,"sources":["components/CreateReceiver.js","components/SendAlarm.js","components/Receivers.js","App.js","reportWebVitals.js","index.js"],"names":["CreateReceiver","props","handleSubmit","event","a","preventDefault","elements","target","receiver","name","value","ric","fetch","method","headers","body","JSON","stringify","rawResponse","json","content","id","addReceiver","className","onSubmit","type","SendAlarm","ricArr","Array","from","filter","el","map","parseInt","concat","receivers","data","message","rows","required","Receivers","useState","setReceivers","selected","setSelected","response","useEffect","fetchReceivers","listReceivers","index","includes","onClick","s","e","stopPropagation","window","confirm","receiversState","splice","removeReceiver","toString","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAEe,SAASA,EAAeC,GAEnC,IAAMC,EAAY,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACjBD,EAAME,iBAEAC,EAAWH,EAAMI,OAAOD,SACxBE,EAAW,CAACC,KAAMH,EAASG,KAAKC,MAAOC,IAAKL,EAASK,IAAID,OAJ9C,SAMSE,MAAM,aAAc,CAC1CC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUT,KAZR,cAMXU,EANW,gBAcKA,EAAYC,OAdjB,OAcXC,EAdW,OAgBjBZ,EAASa,GAAMD,EAAQC,GAEvBpB,EAAMqB,YAAYd,GAElBF,EAASG,KAAKC,MAAQ,GACtBJ,EAASK,IAAID,MAAQ,GArBJ,4CAAH,sDAyBlB,OACI,uBAAMa,UAAW,sCAAuCC,SAAUtB,EAAlE,UACI,wBAAOqB,UAAW,+CAAlB,kBAEI,uBAAOA,UAAW,QAASE,KAAK,OAAOhB,KAAK,YAEhD,wBAAOc,UAAW,+CAAlB,iBAEI,uBAAOA,UAAW,QAASE,KAAK,SAAShB,KAAK,WAGlD,wBAAQc,UAAW,sBAAuBE,KAAK,SAA/C,0BCtCG,SAASC,EAAUzB,GAAO,4CACrC,WAA4BE,GAA5B,mBAAAC,EAAA,sDACID,EAAME,iBAEAC,EAAWH,EAAMI,OAAOD,SAK9BqB,GAJIA,EAASC,MAAMC,KAAKvB,GACnBwB,QAAO,SAAAC,GAAE,MAAgB,SAAZA,EAAGN,MAAgC,KAAbM,EAAGrB,SACtCsB,KAAI,SAAAD,GAAE,OAAIE,SAASF,EAAGrB,WAEXwB,OAAOjC,EAAMkC,WAEvBC,EAAO,CAAEC,QAAS/B,EAAS+B,QAAQ3B,MAAOyB,UAAWR,GAE3Df,MAAM,iBAAkB,CACpBC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUmB,KAlB7B,4CADqC,sBAuBrC,OACI,sBAAKb,UAAW,kCAAhB,UACI,oBAAIA,UAAW,iBAAf,yBAEA,uBAAMC,SA3BwB,SAAD,mCA2B7B,UACI,wBAAOD,UAAW,UAAlB,2BAEI,0BAAUd,KAAK,UAAUc,UAAW,cAAee,KAAK,IAAIC,UAAQ,OAGxE,wBAAOhB,UAAW,UAAlB,iCAEI,gCACI,uBAAOA,UAAW,aAAcE,KAAK,OAAOhB,KAAK,UACjD,uBAAOc,UAAW,aAAcE,KAAK,OAAOhB,KAAK,UACjD,uBAAOc,UAAW,aAAcE,KAAK,OAAOhB,KAAK,gBAIzD,wBAAQc,UAAW,uBAAwBE,KAAK,SAAhD,0BCxCD,SAASe,EAAUvC,GAC9B,MAAkCwC,mBAAS,IAA3C,mBAAON,EAAP,KAAkBO,EAAlB,KACA,EAAgCD,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KAFqC,4CAIrC,4BAAAxC,EAAA,sEAS2BQ,MAAM,cATjC,cASUiC,EATV,YAUIH,EAVJ,SAUuBG,EAAS1B,OAVhC,8EAJqC,sBAqCrC,GAJA2B,qBAAU,YAjC2B,mCAkCjCC,KACD,KAEEZ,EACD,MAAO,UAGX,IAAMa,EAAgBb,EAAUH,KAAI,SAACD,EAAIkB,GAAL,OAChC,sBAAK1B,UAAS,iDAA4CoB,EAASO,SAASnB,EAAGpB,KAAO,cAAgB,eAEjGwC,QAAS,kBAAMR,EAASO,SAASnB,EAAGpB,KAAOiC,EAAYD,EAASb,QAAO,SAAAsB,GAAC,OAAIA,IAAMrB,EAAGpB,QAAQiC,EAAY,GAAD,mBAAKD,GAAL,CAAeZ,EAAGpB,QAF/H,UAII,sBAAMY,UAAW,0HACX4B,QAAS,SAACE,GAAD,OA9BA,SAACJ,EAAO9C,GAG3B,GAFAA,EAAMmD,kBAEHC,OAAOC,QAAQ,2BAAyB,CAEvC5C,MAAM,cAAgBuB,EAAUc,GAAO5B,GAAI,CACvCR,OAAQ,WAGZ,IAAM4C,EAAc,YAAOtB,GAC3BsB,EAAeC,OAAOT,EAAO,GAC7BP,EAAae,IAmBSE,CAAeV,EAAOI,IAD5C,kBAEA,sBAAK9B,UAAW,UAAhB,UACI,uCAAUQ,EAAGtB,QACb,sCAASsB,EAAGpB,YAPVoB,EAAGpB,IAAIiD,WAAa,IAAMX,MAYxC,OACI,sBAAK1B,UAAW,YAAhB,UACI,qBAAKA,UAAW,8CAAhB,SACKyB,IAEL,cAAChD,EAAD,CAAgBsB,YAAa,SAACd,GAAD,OAAckC,EAAa,GAAD,mBAAKP,GAAL,CAAgB3B,QACvE,cAACkB,EAAD,CAAWS,UAAWQ,OChDnBkB,MAdf,WAGI,OACI,qBAAKtC,UAAU,MAAf,SACI,wBAAQA,UAAU,aAAlB,SACI,qBAAKA,UAAW,oBAAhB,SACI,cAACiB,EAAD,WCELsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.57ca59c1.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\n\nexport default function CreateReceiver(props) {\n\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n\n        const elements = event.target.elements\n        const receiver = {name: elements.name.value, ric: elements.ric.value}\n\n        const rawResponse = await fetch('/receivers', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(receiver)\n        });\n        const content = await rawResponse.json();\n\n        receiver.id =  content.id\n\n        props.addReceiver(receiver)\n\n        elements.name.value = ''\n        elements.ric.value = ''\n\n    };\n\n    return (\n        <form className={\"rounded shadow p-3 mb-5 bg-gray-100\"} onSubmit={handleSubmit}>\n            <label className={\"block mb-2 flex items-center justify-between\"}>\n                Name:\n                <input className={\"w-1/2\"} type=\"text\" name=\"name\"/>\n            </label>\n            <label className={\"block mb-2 flex items-center justify-between\"}>\n                RIC:\n                <input className={\"w-1/2\"} type=\"number\" name=\"ric\"/>\n            </label>\n\n            <button className={\"btn-sm bg-green-100\"} type=\"submit\">Erstellen</button>\n        </form>\n    )\n}","import React, {useEffect, useState} from 'react'\n\nexport default function SendAlarm(props) {\n    async function handleSubmit(event) {\n        event.preventDefault()\n\n        const elements = event.target.elements\n        let ricArr = Array.from(elements)\n            .filter(el => el.type === 'text' && el.value !== '')\n            .map(el => parseInt(el.value))\n\n        ricArr = ricArr.concat(props.receivers)\n\n        const data = { message: elements.message.value, receivers: ricArr }\n\n        fetch('/send-telegram', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n    }\n\n    return (\n        <div className={\"rounded shadow p-3 bg-green-100\"}>\n            <h3 className={\"font-bold mb-3\"}>Alarmierung</h3>\n\n            <form onSubmit={handleSubmit}>\n                <label className={\"text-sm\"}>\n                    Telegram-Text:\n                    <textarea name=\"message\" className={\"w-full mb-2\"} rows=\"5\" required></textarea>\n                </label>\n\n                <label className={\"text-sm\"}>\n                    RIC Manuell eingeben\n                    <div>\n                        <input className={\"block mb-1\"} type=\"text\" name=\"ric[]\"/>\n                        <input className={\"block mb-1\"} type=\"text\" name=\"ric[]\"/>\n                        <input className={\"block mb-1\"} type=\"text\" name=\"ric[]\"/>\n                    </div>\n                </label>\n\n                <button className={\"btn-sm mt-2 bg-white\"} type=\"submit\">Senden</button>\n            </form>\n        </div>\n    )\n}","import React, {useEffect, useState} from 'react'\nimport CreateReceiver from './CreateReceiver'\nimport SendAlarm from './SendAlarm'\n\nexport default function Receivers(props) {\n    const [receivers, setReceivers] = useState([])\n    const [selected, setSelected] = useState([])\n\n    async function fetchReceivers() {\n        // setReceivers([\n        //     {id: 1, name: 'FFW Mellensee', ric: 1234567},\n        //     {id: 2, name: 'FFW Mellensee', ric: 21341234},\n        //     {id: 3, name: 'FFW Mellensee', ric: 52342134},\n        //     {id: 4, name: 'FFW Mellensee', ric: 12343425},\n        //     {id: 5, name: 'FFW Mellensee', ric: 1234234},\n        // ]);\n        // return\n        const response = await fetch(\"/receivers\")\n        setReceivers(await response.json())\n    }\n\n    const removeReceiver = (index, event) => {\n        event.stopPropagation()\n\n        if(window.confirm('EmpfÃ¤nger entfernen?')) {\n\n            fetch('/receivers/' + receivers[index].id, {\n                method: 'DELETE'\n            })\n\n            const receiversState = [...receivers]\n            receiversState.splice(index, 1)\n            setReceivers(receiversState)\n\n        }\n    }\n\n    useEffect(() => {\n        fetchReceivers()\n    }, [])\n\n    if (!receivers) {\n        return 'Loading'\n    }\n\n    const listReceivers = receivers.map((el, index) =>\n        <div className={`relative px-3 py-2 mb-5 rounded shadow ${selected.includes(el.ric) ? 'bg-blue-200' : 'bg-gray-100'}`}\n             key={el.ric.toString() + \"_\" + index}\n             onClick={() => selected.includes(el.ric) ? setSelected(selected.filter(s => s !== el.ric)) : setSelected([...selected, el.ric])}\n        >\n            <span className={\"absolute top-0 right-0 w-4 h-4 flex items-center justify-center bg-red-200 rounded-full -mr-2 -mt-2 cursor-pointer z-10\"}\n                  onClick={(e) => removeReceiver(index, e)}>&times;</span>\n            <div className={\"text-sm\"}>\n                <p>Name: {el.name}</p>\n                <p>RIC: {el.ric}</p>\n            </div>\n        </div>\n    )\n\n    return (\n        <div className={\"px-3 py-5\"}>\n            <div className={\"flex items-center justify-between flex-wrap\"}>\n                {listReceivers}\n            </div>\n            <CreateReceiver addReceiver={(receiver) => setReceivers([...receivers, receiver])}/>\n            <SendAlarm receivers={selected}/>\n        </div>\n    )\n}\n","import Receivers from './components/Receivers'\n\n\nfunction App() {\n    // receivers\n    // send-telegram\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className={\"container mx-auto\"}>\n                    <Receivers />\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}